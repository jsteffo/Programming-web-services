package mypack;


import com.sun.org.apache.xerces.internal.parsers.XMLParser;
import com.sun.org.apache.xml.internal.serialize.OutputFormat;
import com.sun.org.apache.xml.internal.serialize.XMLSerializer;
import java.io.FileOutputStream;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.ContentHandler;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.AttributesImpl;
import org.xml.sax.helpers.DefaultHandler;

/**
 * ProfileBySAX uses a ContentHandler to write the profile to an XML File.
 * The ContantHandler is passed to objects of inner classes that extend from DefaulHandler.
 * These classes write elements and attributes to the ContentHandler as events are generated by the SAX parser. 
 * 
 */
public class SampleSAXParser {


    public static void main(String[] args) {

        try {
            // Create Parser
            SAXParserFactory saxpf = SAXParserFactory.newInstance();
            SAXParser saxp = saxpf.newSAXParser();
            
                        
            saxp.setProperty("http://xml.org/sax/features/validation", true);
            // Ensure namespace processing is on (the default)
            saxp.setProperty("http://xml.org/sax/features/namespaces", true);
            
            
            saxp.parse("xml/Transcript.xml", new MyParser());
            
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }


    static class MyParser extends DefaultHandler {

        
        public MyParser() {
        
        }

        @Override
        public void startElement(String arg0, String arg1, String arg2, Attributes arg3) throws SAXException {

            System.out.println("startElement:<" + arg2 + ">"); 
        }

        @Override
        public void characters(char[] arg0, int arg1, int arg2) throws SAXException {
        	System.out.println("characters: " + new String(arg0, arg1, arg2) + " ");
        }

        @Override
        public void endElement(String arg0, String arg1, String arg2) throws SAXException {
           
        	System.out.println("endElement:<" + arg2 + ">");
        }
        
        @Override
        public void startDocument() throws SAXException {
        	System.out.println("<startDocument>");
        }
        @Override
        public void endDocument() throws SAXException {
        	System.out.println("<endDocument>");
        }
    }

}


